from dagster import op

from scipy import optimize
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def _fit_func(x, a, b):
    """Sinusoidal function of variable frequency / amplitude"""
    return a * np.sin(b * x / 10 ** 12) + a


@op(required_resource_keys={"db_con"})
def read_dbt_output(context, dbt_output) -> pd.DataFrame:
    """Load the final model generated by a particular dbt invocation as a pandas DataFrame."""
    final_model = dbt_output.result["results"][-1]["unique_id"][6:]
    return pd.read_sql(f"select * from {final_model};", con=context.resources.db_con)


@op
def get_fit_params(df: pd.DataFrame):
    """
    Given a DataFrame, compute the parameters of a sinusoidal function that best fits the observed
    activity data.
    """
    params, _ = optimize.curve_fit(
        _fit_func, df.date.astype(np.int64), df.num_actions, p0=[1, 0.01]
    )
    return params


@op
def generate_charts(context, df: pd.DataFrame, fit_params):
    """Plot observed data against the model and store the resulting chart."""
    a, b = fit_params
    storage_path = f"/tmp/chart_{context.run_id[:5]}.png"

    # plot the raw data
    plt.plot(df["date"], df["num_actions"], "-")

    # plot the predicted function
    ts = pd.date_range(start=df.date.min(), end=df.date.max(), freq="1H")
    plt.plot(ts, _fit_func(ts.astype(np.int64), a, b), "--")

    # make the chart prettier
    plt.legend(["raw data", "fit data"])
    plt.xticks(rotation=45)
    plt.subplots_adjust(bottom=0.25)

    # store the plot
    plt.savefig(storage_path)

    # (optional) tell dagster about the asset you just updated
    context.log_event(
        AssetMaterialization(
            ["analysis", "chart", "num_action_fit"],
            metadata={
                "function": f"{a:.2f} * sin({b:.2f} * t) + {a:.2f}",
                "location": EventMetadata.path(f"file://{storage_path}"),
            },
        )
    )
